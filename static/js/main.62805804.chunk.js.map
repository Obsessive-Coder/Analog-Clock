{"version":3,"sources":["clock-image.png","components/ClockHand.js","components/ClockBody.js","components/Clock.js","components/CreatorName.js","components/SocialLink.js","components/SocialLinks.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","ClockHand","props","type","react_default","a","createElement","id","concat","className","handTypes","ClockBody","map","handType","index","key","Clock","src","clockImage","alt","CreatorName","target","href","SocialLink","_props$socialLink","socialLink","location","text","icon","rel","index_es","fixedWidth","size","socialLinks","faGlobe","faFile","fabLInkedin","fabGithubSquare","SocialLinks","Footer","App","setClockHandDegrees","_this","setHandDegree","elementId","currentTime","moment","handDegree","getHourDegree","hour","minute","document","getElementById","style","transform","react","dist_default","interval","format","onChange","this","Component","Boolean","window","hostname","match","ReactDOM","render","App_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.62805804.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/clock-image.588178bb.png\";","import React from 'react';\r\n\r\nexport default function ClockHand(props) {\r\n  const { type } = props;\r\n\r\n  return (\r\n    <div\r\n      id={`${type}-hand`}\r\n      className={`centered-setup clock-hand ${type}-hand`}>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport ClockHand from './ClockHand';\r\nconst handTypes = ['second', 'minute', 'hour'];\r\nexport default function ClockBody(props) {\r\n  return (\r\n    <div className=\"circle clock-body\">\r\n      {handTypes.map((handType, index) => (\r\n        <ClockHand key={handType + index} type={handType} />\r\n      ))}\r\n      <div className=\"circle centered-setup clock-center\"></div>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport ClockBody from './ClockBody';\r\nimport clockImage from '../clock-image.png';\r\n\r\n\r\nexport default function Clock(props) {\r\n  return (\r\n    <div className=\"clock-container\">\r\n      <ClockBody />\r\n      <img\r\n        src={clockImage}\r\n        alt=\"clock background\"\r\n        className=\"circle clock-image\"\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\n\r\nexport default function CreatorName(props) {\r\n  return (\r\n    <div className=\"creator-name\">\r\n      <p>\r\n        Created by&nbsp;\r\n        <a\r\n          target=\"_blank\"\r\n          href=\"http://www.jaredhuffstutler.com\"\r\n        >\r\n          Jared Huffstutler\r\n        </a>\r\n      </p>\r\n      <small>\r\n        <a\r\n          href=\"mailto:jaredhuffstutler@email.arizona.edu\"\r\n          className=\"email-link\"\r\n        >\r\n          jaredhuff85@gmail.com\r\n        </a>\r\n      </small>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\n\r\n// Font Awesome Icon Component.\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nexport default function SocialLink(props) {\r\n  const { location, text, icon } = props.socialLink;\r\n  return (\r\n    <a\r\n      target=\"_blank\"\r\n      href={location}\r\n      rel=\"noopener noreferrer\"\r\n      className=\"social-link\"\r\n    >\r\n      <FontAwesomeIcon fixedWidth icon={icon} size=\"2x\" />\r\n      <small>\r\n        {text}\r\n      </small>\r\n    </a>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport SocialLink from './SocialLink';\r\n// Font Awesome Icons.\r\nimport { faGlobe, faFile } from '@fortawesome/free-solid-svg-icons';\r\nimport { faLinkedin as fabLInkedin, faGithubSquare as fabGithubSquare } from '@fortawesome/free-brands-svg-icons';\r\n\r\nconst socialLinks = [\r\n  {\r\n    location: 'http://www.jaredhuffstutler.com',\r\n    text: 'portfolio',\r\n    icon: faGlobe\r\n  },\r\n  {\r\n    location: 'http://www.jaredhuffstutler.com/resume.html',\r\n    text: 'resume',\r\n    icon: faFile\r\n  },\r\n  {\r\n    location: 'https://www.linkedin.com/in/jared-huffstutler/',\r\n    text: 'linkedin',\r\n    icon: fabLInkedin\r\n  },\r\n  {\r\n    location: 'https://github.com/Obsessive-Coder',\r\n    text: 'github',\r\n    icon: fabGithubSquare\r\n  }\r\n]\r\n\r\nexport default function SocialLinks(props) {\r\n  return (\r\n    <div className=\"social-links\">\r\n      {socialLinks.map((socialLink, index) => (\r\n        <SocialLink key={socialLink.text + index} socialLink={socialLink} />\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport CreatorName from './CreatorName';\r\nimport SocialLinks from './SocialLinks';\r\n\r\nexport default function Footer(props) {\r\n  return (\r\n    <footer className=\"footer\">\r\n      <CreatorName />\r\n      <SocialLinks />\r\n    </footer>\r\n  );\r\n}\r\n","import React, { Component, Fragment } from 'react';\nimport Clock from './components/Clock';\nimport Footer from './components/Footer';\nimport moment from 'moment';\nimport Moment from 'react-moment';\nimport './App.css';\n\nexport default class App extends Component {\n  setClockHandDegrees = () => {\n    // Set the degree of each clock hand.\n    this.setHandDegree('second-hand', 'second');\n    this.setHandDegree('minute-hand', 'minute');\n    this.setHandDegree('hour-hand', 'hour');\n  }\n\n  setHandDegree = (elementId, type) => {\n    const currentTime = moment();\n    // Minute and second hand degrees.\n    let handDegree = currentTime[type]() * 6;\n    // If the hand type is \"hour\" then get the degrees.\n    if (type === 'hour') {\n      handDegree = this.getHourDegree(currentTime.hour(), currentTime.minute());\n    }\n    document.getElementById(elementId).style.transform = `rotate(${handDegree}deg)`;\n  }\n\n  getHourDegree = (hour, minute) => {\n    // Return the degree for the hour hand taking into account the minutes.\n    const hourDegree = hour * 30;\n    return hourDegree + (minute / 60) * 30;\n  }\n\n  render() {\n    return (\n      <Fragment>\n        <Clock />\n        <Moment\n          interval={1000}\n          format=\"hh:mm:ss a\"\n          onChange={this.setClockHandDegrees}\n          className=\"centered-setup moment\"\n        />\n        <Footer />\n      </Fragment>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}